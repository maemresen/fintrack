name: fintrack-api
on:
  push:
    paths:
      - fintech-api/**


env:
  DEPLOYMENT_PATH: /root/finrack/deployment
  REGISTRY: ghcr.io
  IMAGE: ghcr.io/maemresen/fintrack-api
  MODULE_NAME: fintrack-api
jobs:
  maven-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B clean install -f ${{ env.MODULE_NAME }}/pom.xml
    - name: Cache maven build
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-${{ env.MODULE_NAME }}
        path: |
          ${{ env.MODULE_NAME }}/fintrack-rest/target
          ${{ env.MODULE_NAME }}/fintrack-rest/Dockerfile

  build-and-push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - maven-build
    steps:
      - name: Restoring cached build and Dockerfile
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-${{ env.MODULE_NAME }}
          path: |
            ${{ env.MODULE_NAME }}/fintrack-rest/target
            ${{ env.MODULE_NAME }}/fintrack-rest/Dockerfile
      - name: XX
        run: |
          ls -la ${{ env.MODULE_NAME }}
          ls -la ${{ env.MODULE_NAME }}/fintrack-rest
          ls -la ${{ env.MODULE_NAME }}/fintrack-rest/target
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        run: |
          docker build -f ${{ env.MODULE_NAME }}/fintrack-rest/Dockerfile ${{ env.MODULE_NAME }}/fintrack-rest --tag ${{ env.IMAGE }}:latest
          docker push ${{ env.IMAGE }}:latest

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build-and-push
    steps:
      - name: Deploying to server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.BT_SV_HOST }}
          username: ${{ secrets.BT_SV_USERNAME }}
          key: ${{ secrets.BT_SV_PRIVATE_KEY }}
          port: ${{ secrets.BT_SV_PORT }}
          script: |
            export REGISTRY="${{ env.REGISTRY }}"
            export REGISTRY_USERNAME="${{ github.actor }}"
            export REGISTRY_PASSWORD="${{ secrets.GITHUB_TOKEN }}"
            export FOLDER_PATH="${{ env.DEPLOYMENT_PATH }}"
            export MODULES="${{ env.MODULE_NAME }}"
            ${{ env.DEPLOYMENT_PATH }}/scripts/deploy.sh
